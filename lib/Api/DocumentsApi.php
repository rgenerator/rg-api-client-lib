<?php
/**
 * DocumentsApi
 * PHP version 5
 *
 * @category Class
 * @package  RGAuth\SwaggerClient
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

namespace RGAuth\SwaggerClient\Api;

use \RGAuth\SwaggerClient\Configuration;
use \RGAuth\SwaggerClient\ApiClient;
use \RGAuth\SwaggerClient\ApiException;
use \RGAuth\SwaggerClient\ObjectSerializer;

/**
 * DocumentsApi Class Doc Comment
 *
 * @category Class
 * @package  RGAuth\SwaggerClient
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DocumentsApi
{

    /**
     * API Client
     * @var \RGAuth\SwaggerClient\ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    /**
     * Constructor
     * @param \RGAuth\SwaggerClient\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('http://qb.myplaydirect.com/');
        }
  
        $this->apiClient = $apiClient;
    }
  
    /**
     * Get API client
     * @return \RGAuth\SwaggerClient\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }
  
    /**
     * Set the API client
     * @param \RGAuth\SwaggerClient\ApiClient $apiClient set the API client
     * @return DocumentsApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }
  
    
    /**
     * v1AccountsShow
     *
     * get user information after passing access token
     *
     * @param string $access_token access token generated after user login (required)
     * @return void
     * @throws \RGAuth\SwaggerClient\ApiException on non-2xx response
     */
    public function v1AccountsShow($access_token)
    {
        
        // verify the required parameter 'access_token' is set
        if ($access_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $access_token when calling v1AccountsShow');
        }
  
        // parse inputs
        $resourcePath = "/v1/account.json";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        // query params
        if ($access_token !== null) {
            $queryParams['access_token'] = $this->apiClient->getSerializer()->toQueryValue($access_token);
        }
        
        
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            }
  
            throw $e;
        }
        
    }
    
    /**
     * v1AccountsUpdate
     *
     * Update name or email on account
     *
     * @param string $access_token access token generated after user login (required)
     * @param string $account_name name (optional)
     * @param string $account_email email (optional)
     * @return void
     * @throws \RGAuth\SwaggerClient\ApiException on non-2xx response
     */
    public function v1AccountsUpdate($access_token, $account_name=null, $account_email=null)
    {
        
        // verify the required parameter 'access_token' is set
        if ($access_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $access_token when calling v1AccountsUpdate');
        }
  
        // parse inputs
        $resourcePath = "/v1/account.json";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "PUT";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        // query params
        if ($access_token !== null) {
            $queryParams['access_token'] = $this->apiClient->getSerializer()->toQueryValue($access_token);
        }// query params
        if ($account_name !== null) {
            $queryParams['account[name]'] = $this->apiClient->getSerializer()->toQueryValue($account_name);
        }// query params
        if ($account_email !== null) {
            $queryParams['account[email]'] = $this->apiClient->getSerializer()->toQueryValue($account_email);
        }
        
        
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            }
  
            throw $e;
        }
        
    }
    
    /**
     * v1AccountsCreate
     *
     * Creates user account
     *
     * @param string $account_email email (required)
     * @param string $account_password password (required)
     * @return void
     * @throws \RGAuth\SwaggerClient\ApiException on non-2xx response
     */
    public function v1AccountsCreate($account_email, $account_password)
    {
        
        // verify the required parameter 'account_email' is set
        if ($account_email === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_email when calling v1AccountsCreate');
        }
        // verify the required parameter 'account_password' is set
        if ($account_password === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_password when calling v1AccountsCreate');
        }
  
        // parse inputs
        $resourcePath = "/v1/account.json";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        // query params
        if ($account_email !== null) {
            $queryParams['account[email]'] = $this->apiClient->getSerializer()->toQueryValue($account_email);
        }// query params
        if ($account_password !== null) {
            $queryParams['account[password]'] = $this->apiClient->getSerializer()->toQueryValue($account_password);
        }
        
        
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            }
  
            throw $e;
        }
        
    }
    
    /**
     * v1AccountsDelete
     *
     * get user information after passing access token
     *
     * @param string $access_token access token generated after user login (required)
     * @return void
     * @throws \RGAuth\SwaggerClient\ApiException on non-2xx response
     */
    public function v1AccountsDelete($access_token)
    {
        
        // verify the required parameter 'access_token' is set
        if ($access_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $access_token when calling v1AccountsDelete');
        }
  
        // parse inputs
        $resourcePath = "/v1/account.json";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "DELETE";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        // query params
        if ($access_token !== null) {
            $queryParams['access_token'] = $this->apiClient->getSerializer()->toQueryValue($access_token);
        }
        
        
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            }
  
            throw $e;
        }
        
    }
    
    /**
     * v1AccountsActivate
     *
     * activate user account
     *
     * @param string $activation_code activation code to activate user account (required)
     * @return void
     * @throws \RGAuth\SwaggerClient\ApiException on non-2xx response
     */
    public function v1AccountsActivate($activation_code)
    {
        
        // verify the required parameter 'activation_code' is set
        if ($activation_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $activation_code when calling v1AccountsActivate');
        }
  
        // parse inputs
        $resourcePath = "/v1/account/activate.json";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        // query params
        if ($activation_code !== null) {
            $queryParams['activation_code'] = $this->apiClient->getSerializer()->toQueryValue($activation_code);
        }
        
        
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            }
  
            throw $e;
        }
        
    }
    
    /**
     * v1ShippingAddressIndex
     *
     * get shipping addresses from the user
     *
     * @param string $access_token Get shipping addresses for the user (required)
     * @param string $per_page Get orders per_page (optional)
     * @param string $page Get orders for a page (optional)
     * @return void
     * @throws \RGAuth\SwaggerClient\ApiException on non-2xx response
     */
    public function v1ShippingAddressIndex($access_token, $per_page=null, $page=null)
    {
        
        // verify the required parameter 'access_token' is set
        if ($access_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $access_token when calling v1ShippingAddressIndex');
        }
  
        // parse inputs
        $resourcePath = "/v1/account/shipping_addresses.json";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        // query params
        if ($access_token !== null) {
            $queryParams['access_token'] = $this->apiClient->getSerializer()->toQueryValue($access_token);
        }// query params
        if ($per_page !== null) {
            $queryParams['per_page'] = $this->apiClient->getSerializer()->toQueryValue($per_page);
        }// query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        
        
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            }
  
            throw $e;
        }
        
    }
    
    /**
     * v1ShippingAddressCreate
     *
     * Creates shipping address
     *
     * @param string $access_token Add shipping addresses to the account (required)
     * @param string $name name (required)
     * @param string $street_1 street address 1 (required)
     * @param string $city city (required)
     * @param string $state state (required)
     * @param string $country country (required)
     * @param string $zip zip (required)
     * @param string $phone phone (required)
     * @param string $street_2 street address 2 (optional)
     * @return void
     * @throws \RGAuth\SwaggerClient\ApiException on non-2xx response
     */
    public function v1ShippingAddressCreate($access_token, $name, $street_1, $city, $state, $country, $zip, $phone, $street_2=null)
    {
        
        // verify the required parameter 'access_token' is set
        if ($access_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $access_token when calling v1ShippingAddressCreate');
        }
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling v1ShippingAddressCreate');
        }
        // verify the required parameter 'street_1' is set
        if ($street_1 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $street_1 when calling v1ShippingAddressCreate');
        }
        // verify the required parameter 'city' is set
        if ($city === null) {
            throw new \InvalidArgumentException('Missing the required parameter $city when calling v1ShippingAddressCreate');
        }
        // verify the required parameter 'state' is set
        if ($state === null) {
            throw new \InvalidArgumentException('Missing the required parameter $state when calling v1ShippingAddressCreate');
        }
        // verify the required parameter 'country' is set
        if ($country === null) {
            throw new \InvalidArgumentException('Missing the required parameter $country when calling v1ShippingAddressCreate');
        }
        // verify the required parameter 'zip' is set
        if ($zip === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zip when calling v1ShippingAddressCreate');
        }
        // verify the required parameter 'phone' is set
        if ($phone === null) {
            throw new \InvalidArgumentException('Missing the required parameter $phone when calling v1ShippingAddressCreate');
        }
  
        // parse inputs
        $resourcePath = "/v1/account/shipping_addresses.json";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        // query params
        if ($access_token !== null) {
            $queryParams['access_token'] = $this->apiClient->getSerializer()->toQueryValue($access_token);
        }// query params
        if ($name !== null) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }// query params
        if ($street_1 !== null) {
            $queryParams['street_1'] = $this->apiClient->getSerializer()->toQueryValue($street_1);
        }// query params
        if ($street_2 !== null) {
            $queryParams['street_2'] = $this->apiClient->getSerializer()->toQueryValue($street_2);
        }// query params
        if ($city !== null) {
            $queryParams['city'] = $this->apiClient->getSerializer()->toQueryValue($city);
        }// query params
        if ($state !== null) {
            $queryParams['state'] = $this->apiClient->getSerializer()->toQueryValue($state);
        }// query params
        if ($country !== null) {
            $queryParams['country'] = $this->apiClient->getSerializer()->toQueryValue($country);
        }// query params
        if ($zip !== null) {
            $queryParams['zip'] = $this->apiClient->getSerializer()->toQueryValue($zip);
        }// query params
        if ($phone !== null) {
            $queryParams['phone'] = $this->apiClient->getSerializer()->toQueryValue($phone);
        }
        
        
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            }
  
            throw $e;
        }
        
    }
    
    /**
     * v1ShippingAddressShow
     *
     * get shipping address by id from the account
     *
     * @param string $access_token Access Token for the account (required)
     * @param string $id get shipping address (required)
     * @return void
     * @throws \RGAuth\SwaggerClient\ApiException on non-2xx response
     */
    public function v1ShippingAddressShow($access_token, $id)
    {
        
        // verify the required parameter 'access_token' is set
        if ($access_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $access_token when calling v1ShippingAddressShow');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling v1ShippingAddressShow');
        }
  
        // parse inputs
        $resourcePath = "/v1/account/shipping_addresses/{id}.json";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        // query params
        if ($access_token !== null) {
            $queryParams['access_token'] = $this->apiClient->getSerializer()->toQueryValue($access_token);
        }
        
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            }
  
            throw $e;
        }
        
    }
    
    /**
     * v1ShippingAddressUpdate
     *
     * Update address for account
     *
     * @param string $access_token Add shipping addresses to the account (required)
     * @param string $id address id (required)
     * @param string $street_1 street address 1 (required)
     * @param string $city city (required)
     * @param string $state state (required)
     * @param string $country country (required)
     * @param string $zip zip (required)
     * @param string $phone phone (required)
     * @param string $street_2 street address 2 (optional)
     * @return void
     * @throws \RGAuth\SwaggerClient\ApiException on non-2xx response
     */
    public function v1ShippingAddressUpdate($access_token, $id, $street_1, $city, $state, $country, $zip, $phone, $street_2=null)
    {
        
        // verify the required parameter 'access_token' is set
        if ($access_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $access_token when calling v1ShippingAddressUpdate');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling v1ShippingAddressUpdate');
        }
        // verify the required parameter 'street_1' is set
        if ($street_1 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $street_1 when calling v1ShippingAddressUpdate');
        }
        // verify the required parameter 'city' is set
        if ($city === null) {
            throw new \InvalidArgumentException('Missing the required parameter $city when calling v1ShippingAddressUpdate');
        }
        // verify the required parameter 'state' is set
        if ($state === null) {
            throw new \InvalidArgumentException('Missing the required parameter $state when calling v1ShippingAddressUpdate');
        }
        // verify the required parameter 'country' is set
        if ($country === null) {
            throw new \InvalidArgumentException('Missing the required parameter $country when calling v1ShippingAddressUpdate');
        }
        // verify the required parameter 'zip' is set
        if ($zip === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zip when calling v1ShippingAddressUpdate');
        }
        // verify the required parameter 'phone' is set
        if ($phone === null) {
            throw new \InvalidArgumentException('Missing the required parameter $phone when calling v1ShippingAddressUpdate');
        }
  
        // parse inputs
        $resourcePath = "/v1/account/shipping_addresses/{id}.json";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "PUT";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        // query params
        if ($access_token !== null) {
            $queryParams['access_token'] = $this->apiClient->getSerializer()->toQueryValue($access_token);
        }// query params
        if ($street_1 !== null) {
            $queryParams['street_1'] = $this->apiClient->getSerializer()->toQueryValue($street_1);
        }// query params
        if ($street_2 !== null) {
            $queryParams['street_2'] = $this->apiClient->getSerializer()->toQueryValue($street_2);
        }// query params
        if ($city !== null) {
            $queryParams['city'] = $this->apiClient->getSerializer()->toQueryValue($city);
        }// query params
        if ($state !== null) {
            $queryParams['state'] = $this->apiClient->getSerializer()->toQueryValue($state);
        }// query params
        if ($country !== null) {
            $queryParams['country'] = $this->apiClient->getSerializer()->toQueryValue($country);
        }// query params
        if ($zip !== null) {
            $queryParams['zip'] = $this->apiClient->getSerializer()->toQueryValue($zip);
        }// query params
        if ($phone !== null) {
            $queryParams['phone'] = $this->apiClient->getSerializer()->toQueryValue($phone);
        }
        
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            }
  
            throw $e;
        }
        
    }
    
    /**
     * v1ShippingAddressDestroy
     *
     * delete shipping addresses from the account
     *
     * @param string $access_token Access Token for the Account (required)
     * @param string $id delete shipping address (required)
     * @return void
     * @throws \RGAuth\SwaggerClient\ApiException on non-2xx response
     */
    public function v1ShippingAddressDestroy($access_token, $id)
    {
        
        // verify the required parameter 'access_token' is set
        if ($access_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $access_token when calling v1ShippingAddressDestroy');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling v1ShippingAddressDestroy');
        }
  
        // parse inputs
        $resourcePath = "/v1/account/shipping_addresses/{id}.json";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "DELETE";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        // query params
        if ($access_token !== null) {
            $queryParams['access_token'] = $this->apiClient->getSerializer()->toQueryValue($access_token);
        }
        
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            }
  
            throw $e;
        }
        
    }
    
    /**
     * v1AccountsUpdatePassword
     *
     * Update password on account
     *
     * @param string $access_token access token generated after user login (required)
     * @param string $account_original_password password (required)
     * @param string $account_password password (required)
     * @return void
     * @throws \RGAuth\SwaggerClient\ApiException on non-2xx response
     */
    public function v1AccountsUpdatePassword($access_token, $account_original_password, $account_password)
    {
        
        // verify the required parameter 'access_token' is set
        if ($access_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $access_token when calling v1AccountsUpdatePassword');
        }
        // verify the required parameter 'account_original_password' is set
        if ($account_original_password === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_original_password when calling v1AccountsUpdatePassword');
        }
        // verify the required parameter 'account_password' is set
        if ($account_password === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_password when calling v1AccountsUpdatePassword');
        }
  
        // parse inputs
        $resourcePath = "/v1/account/update_password.json";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "PUT";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        // query params
        if ($access_token !== null) {
            $queryParams['access_token'] = $this->apiClient->getSerializer()->toQueryValue($access_token);
        }// query params
        if ($account_original_password !== null) {
            $queryParams['account[original_password]'] = $this->apiClient->getSerializer()->toQueryValue($account_original_password);
        }// query params
        if ($account_password !== null) {
            $queryParams['account[password]'] = $this->apiClient->getSerializer()->toQueryValue($account_password);
        }
        
        
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            }
  
            throw $e;
        }
        
    }
    
    /**
     * v1AccountSessionsIndex
     *
     * login
     *
     * @param string $session_email email (required)
     * @param string $session_password password (required)
     * @return void
     * @throws \RGAuth\SwaggerClient\ApiException on non-2xx response
     */
    public function v1AccountSessionsIndex($session_email, $session_password)
    {
        
        // verify the required parameter 'session_email' is set
        if ($session_email === null) {
            throw new \InvalidArgumentException('Missing the required parameter $session_email when calling v1AccountSessionsIndex');
        }
        // verify the required parameter 'session_password' is set
        if ($session_password === null) {
            throw new \InvalidArgumentException('Missing the required parameter $session_password when calling v1AccountSessionsIndex');
        }
  
        // parse inputs
        $resourcePath = "/v1/account_sessions.json";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        // query params
        if ($session_email !== null) {
            $queryParams['session[email]'] = $this->apiClient->getSerializer()->toQueryValue($session_email);
        }// query params
        if ($session_password !== null) {
            $queryParams['session[password]'] = $this->apiClient->getSerializer()->toQueryValue($session_password);
        }
        
        
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            }
  
            throw $e;
        }
        
    }
    
    /**
     * v1PasswordRecoverIndex
     *
     * Send link to reset password
     *
     * @param string $email email (required)
     * @return void
     * @throws \RGAuth\SwaggerClient\ApiException on non-2xx response
     */
    public function v1PasswordRecoverIndex($email)
    {
        
        // verify the required parameter 'email' is set
        if ($email === null) {
            throw new \InvalidArgumentException('Missing the required parameter $email when calling v1PasswordRecoverIndex');
        }
  
        // parse inputs
        $resourcePath = "/v1/password_recover.json";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        // query params
        if ($email !== null) {
            $queryParams['email'] = $this->apiClient->getSerializer()->toQueryValue($email);
        }
        
        
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            }
  
            throw $e;
        }
        
    }
    
    /**
     * v1PasswordRecoverPut
     *
     * reset user's password
     *
     * @param string $token reset password token (required)
     * @param string $password New Password (required)
     * @return void
     * @throws \RGAuth\SwaggerClient\ApiException on non-2xx response
     */
    public function v1PasswordRecoverPut($token, $password)
    {
        
        // verify the required parameter 'token' is set
        if ($token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $token when calling v1PasswordRecoverPut');
        }
        // verify the required parameter 'password' is set
        if ($password === null) {
            throw new \InvalidArgumentException('Missing the required parameter $password when calling v1PasswordRecoverPut');
        }
  
        // parse inputs
        $resourcePath = "/v1/password_recover/reset.json";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "PUT";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        // query params
        if ($token !== null) {
            $queryParams['token'] = $this->apiClient->getSerializer()->toQueryValue($token);
        }// query params
        if ($password !== null) {
            $queryParams['password'] = $this->apiClient->getSerializer()->toQueryValue($password);
        }
        
        
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            }
  
            throw $e;
        }
        
    }
    
}
